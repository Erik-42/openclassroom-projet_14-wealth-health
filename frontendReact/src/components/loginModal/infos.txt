//
import { useEffect, useState } from "react";
import { useDispatch } from "react-redux";
import { setToken } from "../../store/slice/tokenSlice";
import { useNavigate } from "react-router-dom";
import Loader from "../../utils/loader/loader";
import styled from "./loginModal.module.scss";

export default function LoginModal() {
	const [login, setLogin] = useState("");
	const [password, setPassword] = useState("");
	const [rememberMe, setRememberMe] = useState(false);
	const [errorMessage, setErrorMessage] = useState("");
	const [loading, setLoading] = useState(false);
	const [isLoginDisabled, setIsLoginDisabled] = useState(false); // Pour désactiver les connexions
	const dispatch = useDispatch();
	const navigate = useNavigate();

	// Charge le token deouis localStorage
	useEffect(() => {
		const storedToken = localStorage.getItem("token");
		if (storedToken) {
			dispatch(setToken(storedToken));
			navigate("/listEmployees");
		}
	}, [dispatch, navigate]);

	const handleSubmit = async (e) => {
		e.preventDefault();
		if (isLoginDisabled) {
			setErrorMessage("Les connexions sont temporairement désactivées.");
			return;
		}

		setLoading(true);

		try {
			const response = await fetch("../../mock/api/login", {
				headers: { "Content-Type": "application/json" },
				method: "POST",
				body: JSON.stringify({
					email: login,
					password: password,
				}),
			});

			if (!response.ok) {
				throw new Error("Erreur de connexion");
			}

			const data = await response.json();

			if (data.token) {
				dispatch(setToken(data.token));
				if (rememberMe) {
					localStorage.setItem("token", data.token);
				}
				navigate("/listEmployees");
			} else {
				throw new Error(data.message || "Login erreur");
			}
		} catch (error) {
			setErrorMessage(error.message);
		} finally {
			setLoading(false);
		}
	};

	return (
		<>
			{loading && <Loader />}
			<section className={styled.login}>
				<i className={`fa fa-user-circle ${styled.login__icon}`}></i>
				<h1>Sign In</h1>

				{errorMessage && (
					<div className={styled.login__errorMessage}>{errorMessage}</div>
				)}

				<form className={styled.login__form} onSubmit={handleSubmit}>
					<div className={styled.login__form__wrapper}>
						<label htmlFor="email">Email</label>
						<input
							id="email"
							type="email"
							name="email"
							required
							value={login}
							onChange={(e) => setLogin(e.target.value)}
						/>
					</div>
					<div className={styled.login__form__wrapper}>
						<label htmlFor="password">Password</label>
						<input
							id="password"
							type="password"
							name="password"
							required
							value={password}
							onChange={(e) => setPassword(e.target.value)}
						/>
					</div>
					<div className={styled.login__form__remember}>
						<input
							id="rememberMe"
							type="checkbox"
							name="persistent"
							checked={rememberMe}
							onChange={(e) => setRememberMe(e.target.checked)}
						/>
						<label htmlFor="rememberMe">Remember me</label>
					</div>

					<button
						type="submit"
						className={styled.login__button}
						disabled={isLoginDisabled} // Désactive le bouton si la connexion est désactivée
					>
						Sign In
					</button>
				</form>
			</section>
		</>
	);
}

// 1-Ajouter un état pour activer ou désactiver la connexion : Créez un nouvel état isLoginDisabled pour contrôler si les connexions sont autorisées ou non.

// 2-Mettre à jour le bouton de soumission : Désactivez le bouton "Sign In" si les connexions sont désactivées, et affichez un message d'erreur lorsque quelqu'un essaie de se connecter pendant la période de désactivation.

// Résumé des modifications :
// isLoginDisabled : Utilisez cet état pour activer/désactiver les connexions.
// Désactivation du bouton "Sign In" : Le bouton sera désactivé et un message d'erreur s'affichera si les connexions sont désactivées.
// Vous pouvez modifier dynamiquement setIsLoginDisabled selon vos besoins pour activer ou désactiver les connexions.
